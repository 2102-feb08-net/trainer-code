trigger:
  branches:
    include:
    - main
  paths:
    include:
    - 5-soa/EmailApp

pr:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: build

  variables:
    appDirectory: 5-soa/EmailApp

  jobs:
  - job: build

    steps:
    - task: UseDotNet@2
      displayName: use dotnet sdk 5
      inputs:
        packageType: 'sdk'
        version: '5.0.x'

    - script: dotnet publish --configuration Release --output $(Build.StagingDirectory)/app
      displayName: dotnet publish
      workingDirectory: $(appDirectory)

    - publish: $(Build.StagingDirectory)/app
      artifact: app
      displayName: publish assemblies

  - job: analyze

    steps:
    - task: UseDotNet@2
      displayName: use dotnet sdk 5
      inputs:
        packageType: 'sdk'
        version: '5.0.x'

    - task: UseDotNet@2
      displayName: add dotnet runtime 2
      inputs:
        packageType: 'runtime'
        version: '2.x'

    - task: SonarCloudPrepare@1
      displayName: sonar prepare analysis
      inputs:
        SonarCloud: 'sonarcloud-escalonn'
        organization: '2102-feb08-net'
        scannerMode: 'MSBuild'
        projectKey: '2102-feb08-net_trainer-code'
        projectName: 'trainer-code/5-soa/EmailApp'
        extraProperties: 'sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/*/coverage.opencover.xml'

    - script: dotnet build --configuration Release
      displayName: dotnet build
      workingDirectory: $(appDirectory)

    - script: dotnet test EmailApp.UnitTests
        --configuration Release
        --collect:"XPlat Code Coverage"
        --logger trx
        --no-build
        --results-directory $(Common.TestResultsDirectory)/unit
        --
        DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
      displayName: dotnet unit test
      workingDirectory: $(appDirectory)

    - task: PublishTestResults@2
      displayName: publish unit test results
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '*.trx'
        searchFolder: '$(Common.TestResultsDirectory)/unit'
        testRunTitle: 'unit'

    - script: dotnet test EmailApp.IntegrationTests
        --configuration Release
        --collect:"XPlat Code Coverage"
        --logger trx
        --no-build
        --results-directory $(Common.TestResultsDirectory)/int
        --
        DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
      displayName: dotnet integration test
      workingDirectory: $(appDirectory)

    - task: PublishTestResults@2
      displayName: publish integration test results
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '*.trx'
        searchFolder: '$(Common.TestResultsDirectory)/int'
        testRunTitle: 'integration'

    - task: PublishCodeCoverageResults@1
      displayName: publish code coverage reports
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Common.TestResultsDirectory)/*/coverage.cobertura.xml'

    - task: SonarCloudAnalyze@1
      displayName: sonar run analysis

    - task: SonarCloudPublish@1
      displayName: publish sonar quality gate
      inputs:
        pollingTimeoutSec: '300'


- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  jobs:
  - deployment: app_service
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: app
            displayName: download app assemblies

          - task: AzureRmWebAppDeployment@4
            displayName: app service deploy
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Training(0c61e2ed-4a6a-437f-9a03-1f223527220b)'
              appType: 'webApp'
              WebAppName: '2102-escalona-email'
              packageForLinux: '$(Pipeline.Workspace)/app'
